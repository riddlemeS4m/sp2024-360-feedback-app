@model Capstone_360s.Models.VMs.AssignPOCVM

@{
    var pattern = @"/^[^@]+@[^@]+ua\.edu$/";
    ViewData["Title"] = "Assign Project Manager";
}

<h4>Assign Project Manager to @Model.Project.Name</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="AssignManager">
            <div class="text-danger"></div>
            <input type="hidden" name="projectId" value="@Model.Project.Id" />
            <div class="form-group">
                <label for="ManagerEmail" class="control-label">Email</label>
                <input id="managerEmail" name="ManagerEmail" class="form-control" placeholder="Individual's UA-issued email"/>
                <span id="managerEmailError" for="ManagerEmail" class="text-danger"></span>
            </div>
            <br />
            @if(Model.POCs.Count != 0)
            {
                <!-- Dropdown for SelectListItems -->
                <div class="form-group">
                    <label for="SelectedManager" class="control-label">Or, Select Manager</label>
                    <select id="managerDropdown" name="SelectedManager" class="form-control">
                        <option value="">-- Select a POC --</option>
                        @foreach (var poc in Model.POCs)
                        {
                            <option value="@poc.Value">@poc.Text</option>
                        }
                    </select>
                </div>
            }
            <br />
            <div class="form-group">
                <input id="assign-button" type="submit" value="Assign" class="btn btn-primary" /> | 
                <a class="btn btn-warning" asp-action="ProjectsIndex" asp-route-timeframeId="@Model.Project.TimeframeId" asp-route-organizationId="@Model.Project.OrganizationId">Back</a>
            </div>
        </form>
    </div>
</div>

@section Scripts
{
    <script>
        // Helper function to populate input field
        function populateInput(dropdownId, inputId) {
            const dropdown = document.getElementById(dropdownId);
            const input = document.getElementById(inputId);

            if(dropdown !== null && input !== null)
            {
                dropdown.addEventListener('change', function() {
                    input.value = this.value;  // Set input value to selected option value
                });
            }
        }

        // Attach event listeners for each dropdown
        populateInput('managerDropdown', 'managerEmail');
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const pocEmail = document.getElementById('managerEmail');
            const pocEmailError = document.getElementById('managerEmailError');
            const saveButton = document.getElementById('assign-button');

            function validateSaveButton() {
                const isPocEmailValid = validateEmail(pocEmail.value, pocEmailError);
                saveButton.disabled = !((isPocEmailValid || pocEmail.value === ""));
            }

            // Email Validation Logic
            function validateEmail(email, error) {
                const pattern = @Html.Raw(@pattern);
                if (pattern.test(email)) {
                    error.style.display = "none";
                    return true;
                } else {
                    error.style.display = "block";
                    return false;
                }
            }

            pocEmail.addEventListener('input', validateSaveButton);
        });
    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}