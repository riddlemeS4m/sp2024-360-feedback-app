@{
    ViewData["Title"] = "Generate PDFs";

    var organizationId = Context.Request.Query["organizationId"].ToString();
    var timeframeId = Context.Request.Query["timeframeId"].ToString();
    var roundId = Context.Request.Query["roundId"].ToString();
}

<h1 id="loading-header">Please Wait...</h1>
<hr />
<div class="row">
    @* <div class="col-md-3">
        <form id="profile-form" method="post" enctype="multipart/form-data">
            <input type="hidden" name="organizationId" value="@organizationId" />
            <input type="hidden" name="timeframeId" value="@timeframeId" />
            <input type="hidden" name="roundId" value="@roundId" />
            <button id="update-profile-button" type="button" class="btn btn-primary">Save</button>
        </form>
    </div> *@

    <!-- Placeholder for status -->
    <div id="upload-status" style="margin-top: 10px;"></div>
    <div id="timer" style="margin-top: 10px; font-weight: bold;"></div>

    <div class="col-md-3" id="success-button-div">
        <a id="success-button" class="btn btn-success disabled">Back</a>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener("DOMContentLoaded", async (e) => {
            e.target.disabled = true;
            const statusDiv = document.getElementById("upload-status");
            const timerDiv = document.getElementById("timer");

            statusDiv.innerHTML = `<div class="spinner-border" role="status"></div> <span>Generating & uploading pdfs...</span>`;

            let elapsedSeconds = 0;
            const timerInterval = setInterval(() => {
                elapsedSeconds++;
                const minutes = Math.floor(elapsedSeconds / 60);
                const seconds = elapsedSeconds % 60;
                timerDiv.textContent = `Time Elapsed: ${minutes}m ${seconds}s`;
            }, 1000);

            @* const form = document.getElementById("profile-form");
            const formData = new FormData(form); *@

            @* const organizationId = form.querySelector('input[name="organizationId"]').value;
            const timeframeId = form.querySelector('input[name="timeframeId"]').value;
            const roundId =e form.querySelector('input[name="roundId"]').value; *@

            const organizationId = "@organizationId";

            let url = `/Capstone/Capstone/GeneratePdfs?organizationId=${encodeURIComponent(organizationId)}&timeframeId=${encodeURIComponent(@timeframeId)}&roundId=${encodeURIComponent(@roundId)}`;

            try {
                let response = await fetch(url, {
                    method: "POST"
                });

                if (!response.ok) {
                    let error = await response.text();
                    document.getElementById("upload-status").innerText = `Error: ${error}`;
                    clearInterval(timerInterval);
                    e.target.disabled = false;
                    return;
                }

                let result = await response.json();
                url = result.redirectUrl;

                header = document.getElementById("loading-header");
                header.innerText = "Done!"

                statusDiv.innerHTML = "<span>Please click the back button to return to the projects index.</span>"

                backButton = document.getElementById("success-button");
                backButton.href = url;
                backButton.classList.remove("disabled");

                setTimeout(() => {
                    //window.location.href = result.redirectUrl;
                }, 2000);
                
            } catch (error) {
                console.error("An error occurred:", error);
                document.getElementById("upload-status").innerText = "An error occurred. Please try again.";
                clearInterval(timerInterval);
                e.target.disabled = false;
            }
        });
    </script>
}