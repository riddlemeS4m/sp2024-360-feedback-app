@model Capstone_360s.Models.VMs.ProjectEditVM

@{
    var pattern = @"/^[^@]+@[^@]+ua\.edu$/";
    ViewData["Title"] = $"Create a Project";

    var timeframeId = Context.Request.Query["timeframeId"].ToString();
    var organizationId = (string)ViewContext.RouteData.Values["organizationId"];
}

<style>
    .remove-member {
        background-color: #343a40;  /* Dark Gray (Bootstrap dark) */
        color: white;
        border: none;
        padding: 5px 10px;
        font-size: 14px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .remove-member:hover {
        background-color: #212529;  /* Darker shade on hover */
    }

    #teamMemberList li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 5px 0;
    }

    #teamMemberList button {
        margin-left: 10px;
    }
</style>

<h2>Create a Project</h2>
<div class="row">
    <div class="col-md-4">
        <form asp-action="ProjectCreate">
            @Html.AntiForgeryToken()
            <div class="text-danger"></div>
            <input type="hidden" for="timeframeId" name="timeframeId" value=@timeframeId />

            <h4>Basic Information</h4>
            <hr />
            <div class="form-group">
                <label asp-for="Project.Name" class="control-label"></label>
                <input asp-for="Project.Name" class="form-control" />
                <span asp-validation-for="Project.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Project.Description" class="control-label"></label>
                <textarea asp-for="Project.Description" class="form-control"></textarea>
                <span asp-validation-for="Project.Description" class="text-danger"></span>
            </div>
            <br />

            <h4>Project Members</h4>
            <hr />
            <div class="form-group">
                <label class="control-label">Team Members</label>
                <ul id="teamMemberList">
                    <li id="placeholder-item"><i>No team members yet.</i></li>
                </ul>
            </div>

            <!-- Hidden Input to Track Changes -->
            <input type="hidden" id="teamMembersInput" name="NewTeamMembers" 
                value=""/>

            @if(Model.PotentialTeamMembers?.Count != 0)
            {
                <!-- Dropdown for SelectListItems -->
                <div class="form-group">
                    <label for="SelectedTeamMember" class="control-label">Select Team Member</label>
                    <select id="teamMemberDropdown" name="SelectedTeamMember" class="form-control">
                        <option value="">-- Select a Team Member --</option>
                        @foreach (var poc in Model.PotentialTeamMembers)
                        {
                            <option value="@poc.Value">@poc.Text</option>
                        }
                    </select>
                </div>
                <br />
            }
            <div class="form-group">
                <label for="TeamMemberEmail" class="control-label">New Team Member's Email</label>
                <input id="teamMemberEmail" name="TeamMemberEmail" class="form-control" placeholder="Individual's UA-issued email"/>
                <span id="emailError" for="TeamMemberEmail" class="text-danger"></span>
            </div>
            <br />
            <div class="form-group">
                <button type="button" id="addMemberButton" class="btn btn-primary" disabled>Add</button>
            </div>
            <br />

            <h4>Project Manager</h4>
            <hr />
            @if(Model.PotentialTeamMembers?.Count != 0)
            {
                <!-- Dropdown for SelectListItems -->
                <div class="form-group">
                    <label for="SelectedManager" class="control-label">Select Manager</label>
                    <select id="managerDropdown" name="SelectedManager" class="form-control">
                        <option value="">-- Select a Manager --</option>
                        @foreach (var poc in Model.PotentialTeamMembers)
                        {
                            <option value="@poc.Value">@poc.Text</option>
                        }
                    </select>
                </div>
                <br />
            }
            <div class="form-group">
                <label for="ManagerEmail" class="control-label">New Manager's Email</label>
                <input id="managerEmail" name="ManagerEmail" class="form-control" placeholder="Individual's UA-issued email"/>
                <span id="managerEmailError" for="ManagerEmail" class="text-danger"></span>
            </div>
            <br />

            <h4>Sponsor</h4>
            <hr />
            @if(Model.PotentialPOCs?.Count != 0)
            {
                <!-- Dropdown for SelectListItems -->
                <div class="form-group">
                    <label for="SelectedPOC" class="control-label">Select Point of Contact</label>
                    <select id="pocDropdown" name="SelectedPOC" class="form-control">
                        <option value="">-- Select a POC --</option>
                        @foreach (var poc in Model.PotentialPOCs)
                        {
                            <option value="@poc.Value">@poc.Text</option>
                        }
                    </select>
                </div>
                <br />
            }
            <div class="form-group">
                <label for="POCEmail" class="control-label">New Sponsor's Email</label>
                <input id="pocEmail" name="POCEmail" class="form-control" placeholder="Individual's UA-issued email"/>
                <span id="pocEmailError" for="POCEmail" class="text-danger"></span>
            </div>
            <br />

            <div class="form-group">
                <input id="save-button" type="submit" value="Save" class="btn btn-primary" /> | 
                <a class="select-link-primary" asp-action="ProjectsIndex" asp-route-timeframeId="@timeframeId" asp-route-organizationId="@organizationId">Back</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {


    <!-- JavaScript to Handle Event Listeners -->
    <script>
        // Helper function to populate input field
        function populateInput(dropdownId, inputId) {
            const dropdown = document.getElementById(dropdownId);
            const input = document.getElementById(inputId);

            if(dropdown !== null && input !== null)
            {
                dropdown.addEventListener('change', function() {
                    input.value = this.value;  // Set input value to selected option value
                });
            }
        }

        // Attach event listeners for each dropdown
        populateInput('teamMemberDropdown', 'teamMemberEmail');
        populateInput('managerDropdown', 'managerEmail');
        populateInput('pocDropdown', 'pocEmail');
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const teamMemberList = document.getElementById('teamMemberList');
            const teamMembersInput = document.getElementById('teamMembersInput');
            const addMemberButton = document.getElementById('addMemberButton');
            const teamMemberDropdown = document.getElementById('teamMemberDropdown');
            const teamMemberEmail = document.getElementById('teamMemberEmail');
            const pocEmail = document.getElementById('pocEmail');
            const managerEmail = document.getElementById('managerEmail');
            const emailError = document.getElementById('emailError');
            const pocEmailError = document.getElementById('pocEmailError');
            const managerEmailError = document.getElementById('managerEmailError');
            const saveButton = document.getElementById('save-button');
            const placeholderItem = document.getElementById('placeholder-item');

            // Disable Add Button Until Valid Inputs
            function validateAddButton() {
                @* const isDropdownSelected = teamMemberDropdown.value !== ""; *@
                @* const isEmailEntered = teamMemberEmail.value.trim() !== ""; *@
                const isEmailValid = validateEmail(teamMemberEmail.value, emailError);
                addMemberButton.disabled = !(isEmailValid);
                saveButton.disabled = !(isEmailValid || teamMemberEmail.value === "");
            }

            function validateSaveButton() {
                const isPocEmailValid = validateEmail(pocEmail.value, pocEmailError);
                const isManagerEmailValid = validateEmail(managerEmail.value, managerEmailError);
                saveButton.disabled = !((isPocEmailValid || pocEmail.value === "") && (isManagerEmailValid || managerEmail.value === ""));
            }

            // Email Validation Logic
            function validateEmail(email, error) {
                const pattern = @Html.Raw(@pattern);
                if (pattern.test(email)) {
                    error.style.display = "none";
                    return true;
                } else {
                    error.style.display = "block";
                    return false;
                }
            }

            // Attach Listeners to Enable/Disable Button
            teamMemberDropdown.addEventListener('change', validateAddButton);
            teamMemberEmail.addEventListener('input', validateAddButton);

            pocEmail.addEventListener('input', validateSaveButton);
            managerEmail.addEventListener('input', validateSaveButton);

            // Remove Team Member (X Button)
            teamMemberList.addEventListener('click', function (e) {
                if (e.target.classList.contains('remove-member')) {
                    const listItem = e.target.parentElement;
                    const memberId = listItem.dataset.memberId;
                    listItem.remove();
                    updateHiddenField(memberId, false);  // Remove from hidden input
                }
            });

            // Add Team Member
            addMemberButton.addEventListener('click', function () {
                const selectedOption = teamMemberDropdown.options[teamMemberDropdown.selectedIndex];
                const email = teamMemberEmail.value;

                if(placeholderItem !== null)
                {
                    placeholderItem.remove();
                }

                if (selectedOption.value && email) {
                    // Add to the list
                    const newListItem = document.createElement('li');
                    newListItem.innerHTML = `<span>${selectedOption.text} (${email})</span> 
                        <button type="button" class="btn-close remove-member" aria-label="Remove"></button>`;
                    newListItem.setAttribute('data-member-id', selectedOption.value);
                    teamMemberList.appendChild(newListItem);

                    // Update hidden input field
                    updateHiddenField(selectedOption.value, true);

                    // Clear selections
                    teamMemberDropdown.selectedIndex = 0;
                    teamMemberEmail.value = '';
                    validateAddButton();
                }
            });

            // Update Hidden Field (Tracking Changes)
            function updateHiddenField(memberId, isAdd) {
                const currentMembers = teamMembersInput.value ? teamMembersInput.value.split(',') : [];

                if (isAdd) {
                    if (!currentMembers.includes(memberId)) {
                        currentMembers.push(memberId);
                    }
                } else {
                    const index = currentMembers.indexOf(memberId);
                    if (index > -1) {
                        currentMembers.splice(index, 1);
                    }
                }
                teamMembersInput.value = currentMembers.join(',');
            }
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }    
}